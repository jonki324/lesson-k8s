/* tslint:disable */
/* eslint-disable */
/**
 * lesson-k8s API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export enum Color {
    Blue = 'BLUE',
    Default = 'DEFAULT',
    Green = 'GREEN',
    Red = 'RED'
}

/**
 * 
 * @export
 * @interface Memo
 */
export interface Memo {
    /**
     * 
     * @type {string}
     * @memberof Memo
     */
    body?: string;
    /**
     * 
     * @type {Color}
     * @memberof Memo
     */
    color?: Color;
    /**
     * 
     * @type {string}
     * @memberof Memo
     */
    createdAt?: string;
    /**
     * 
     * @type {number}
     * @memberof Memo
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Memo
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Memo
     */
    updatedAt?: string;
    /**
     * 
     * @type {number}
     * @memberof Memo
     */
    version?: number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/memos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosIdDelete: async (id: number, memo?: Memo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMemosIdDelete', 'id', id)
            const localVarPath = `/api/memos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosIdGet: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMemosIdGet', 'id', id)
            const localVarPath = `/api/memos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosIdPut: async (id: number, memo?: Memo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiMemosIdPut', 'id', id)
            const localVarPath = `/api/memos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosPost: async (memo?: Memo, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/memos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(memo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemosGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Memo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMemosGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemosIdDelete(id: number, memo?: Memo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMemosIdDelete(id, memo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemosIdGet(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Memo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMemosIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} id 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemosIdPut(id: number, memo?: Memo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Memo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMemosIdPut(id, memo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiMemosPost(memo?: Memo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Memo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiMemosPost(memo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosGet(options?: any): AxiosPromise<Array<Memo>> {
            return localVarFp.apiMemosGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosIdDelete(id: number, memo?: Memo, options?: any): AxiosPromise<void> {
            return localVarFp.apiMemosIdDelete(id, memo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosIdGet(id: number, options?: any): AxiosPromise<Memo> {
            return localVarFp.apiMemosIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosIdPut(id: number, memo?: Memo, options?: any): AxiosPromise<Memo> {
            return localVarFp.apiMemosIdPut(id, memo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Memo} [memo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiMemosPost(memo?: Memo, options?: any): AxiosPromise<Memo> {
            return localVarFp.apiMemosPost(memo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMemosGet(options?: any) {
        return DefaultApiFp(this.configuration).apiMemosGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Memo} [memo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMemosIdDelete(id: number, memo?: Memo, options?: any) {
        return DefaultApiFp(this.configuration).apiMemosIdDelete(id, memo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMemosIdGet(id: number, options?: any) {
        return DefaultApiFp(this.configuration).apiMemosIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {Memo} [memo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMemosIdPut(id: number, memo?: Memo, options?: any) {
        return DefaultApiFp(this.configuration).apiMemosIdPut(id, memo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Memo} [memo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiMemosPost(memo?: Memo, options?: any) {
        return DefaultApiFp(this.configuration).apiMemosPost(memo, options).then((request) => request(this.axios, this.basePath));
    }
}


